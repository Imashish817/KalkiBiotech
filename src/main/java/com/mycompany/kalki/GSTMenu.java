/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.kalki;

import com.mycompany.kalki.DBCalls.MongoDBCalls;
import java.awt.Desktop;
import java.util.ArrayList;
import java.util.Date;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import javax.swing.JOptionPane;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFSheetConditionalFormatting;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.codehaus.plexus.util.FileUtils;

/**
 *
 * @author imash
 */
public class GSTMenu extends javax.swing.JFrame {

    /**
     * Creates new form GSTMenu
     */
    public GSTMenu() {
        initComponents();
        
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jButton4.setVisible(false);
        jLabel1.setVisible(false);
        jLabel2.setVisible(false);
    }
    MongoDBCalls DBCalls = new MongoDBCalls();
    ArrayList<GSTR1Model> soldmed = new ArrayList<GSTR1Model>();
    String GSTR1File = "GSTR1.xlsx";
    String GSTR1FileLocation = "C:/Kalki/" + GSTR1File;

    String SalesFile = "SalesRecord.xlsx";
    String SalesFileLocation = "C:/Kalki/" + SalesFile;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Start"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("End"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("GSTR1");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sales");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Purcheses");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Click on Type of report to download.");

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Comming Soon");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(188, 188, 188)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(110, 110, 110))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
SimpleDateFormat format1 = new SimpleDateFormat("dd-MM-yyyy");
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Creating file object of existing excel file
        int row;
        //New students records to update in excel file
        ArrayList<Object[]> B2BData = new ArrayList<>();
        ArrayList<Object[]> NillRatedData = new ArrayList<>();
        ArrayList<Object[]> ReturnBillData = new ArrayList<>();

        Double TotalB2BAmount = 0.0;
        Double TotalB2BTaxableAmount = 0.0;
        Double TotalB2BSGST = 0.0;
        Double TotalB2BCGST = 0.0;
        Double TotalB2BIGST = 0.0;
        Double TotalB2BQTY = 0.0;

        Double TotalNillAmount = 0.0;
        Double TotalNillTaxableAmount = 0.0;
        Double TotalNillSGST = 0.0;
        Double TotalNillCGST = 0.0;
        Double TotalNillIGST = 0.0;
        Double TotalNillIQTY = 0.0;

        Double TotalReturnAmount = 0.0;
        Double TotalReturnTaxableAmount = 0.0;
        Double TotalReturnSGST = 0.0;
        Double TotalReturnCGST = 0.0;
        Double TotalReturnIGST = 0.0;
        Double TotalReturnQTY = 0.0;
        for (int i = 0; i < soldmed.size(); i++) {
            if (soldmed.get(i).getNature().equals("B2B") && soldmed.get(i).getGSTrate() > 0 && !soldmed.get(i).getInvoiceNo().contains("/KB/R/")) {
                TotalB2BAmount = TotalB2BAmount + soldmed.get(i).getInvoiceAmount();
                TotalB2BTaxableAmount = TotalB2BTaxableAmount + soldmed.get(i).getTaxableAmount();
                TotalB2BQTY = TotalB2BQTY + soldmed.get(i).getQTY();
                Object[] Data = new Object[17];
                Data[0] = B2BData.size() + 1;
                Data[1] = soldmed.get(i).getClientName();
                Data[2] = soldmed.get(i).getGSTN();
                Data[3] = format1.format(soldmed.get(i).getInvoiceDate());
                Data[4] = soldmed.get(i).getInvoiceNo();
                Data[5] = soldmed.get(i).getInvoiceAmount();
                Data[6] = soldmed.get(i).getDestination();
                Data[7] = soldmed.get(i).getHSNCode();
                Data[8] = soldmed.get(i).getQTY();
                Data[9] = soldmed.get(i).getInvoiceAmount();
                Data[10] = soldmed.get(i).getTaxableAmount();
                if (soldmed.get(i).getDestination().contains("09-Uttar Pradesh")) {
                    TotalB2BSGST = TotalB2BSGST + soldmed.get(i).getGSTAmount() / 2;
                    TotalB2BCGST = TotalB2BCGST + soldmed.get(i).getGSTAmount() / 2;
                    Data[11] = soldmed.get(i).getGSTrate() / 2;
                    Data[12] = soldmed.get(i).getGSTAmount() / 2;
                    Data[13] = soldmed.get(i).getGSTrate() / 2;
                    Data[14] = soldmed.get(i).getGSTAmount() / 2;
                    Data[15] = 0.0;
                    Data[16] = 0.0;
                } else {
                    Data[11] = 0.0;
                    Data[12] = 0.0;
                    Data[13] = 0.0;
                    Data[14] = 0.0;
                    TotalB2BIGST = TotalB2BSGST + soldmed.get(i).getGSTAmount();
                    Data[15] = soldmed.get(i).getGSTrate();
                    Data[16] = soldmed.get(i).getGSTAmount();
                }
                B2BData.add(Data);
            }
            if (soldmed.get(i).getNature().equals("B2B") && soldmed.get(i).getInvoiceNo().contains("/KB/R/")) {
                TotalReturnAmount = TotalReturnAmount + soldmed.get(i).getInvoiceAmount();
                TotalReturnTaxableAmount = TotalReturnTaxableAmount + soldmed.get(i).getTaxableAmount();
                TotalReturnQTY = TotalReturnQTY + soldmed.get(i).getQTY();
                Object[] Data = new Object[17];
                Data[0] = ReturnBillData.size() + 1;
                Data[1] = soldmed.get(i).getClientName();
                Data[2] = soldmed.get(i).getGSTN();
                Data[3] = format1.format(soldmed.get(i).getInvoiceDate());
                Data[4] = soldmed.get(i).getInvoiceNo();
                Data[5] = soldmed.get(i).getInvoiceAmount() * (-1);
                Data[6] = soldmed.get(i).getDestination();
                Data[7] = soldmed.get(i).getHSNCode();
                Data[8] = soldmed.get(i).getQTY();
                Data[9] = soldmed.get(i).getInvoiceAmount();
                Data[10] = soldmed.get(i).getTaxableAmount() * (-1);
                if (soldmed.get(i).getDestination().contains("09-Uttar Pradesh")) {
                    TotalReturnSGST = TotalReturnSGST + soldmed.get(i).getGSTAmount() / 2;
                    TotalReturnCGST = TotalReturnCGST + soldmed.get(i).getGSTAmount() / 2;
                    Data[11] = (-1) * soldmed.get(i).getGSTrate() / 2;
                    Data[12] = (-1) * soldmed.get(i).getGSTAmount() / 2;
                    Data[13] = (-1) * soldmed.get(i).getGSTrate() / 2;
                    Data[14] = (-1) * soldmed.get(i).getGSTAmount() / 2;
                    Data[15] = 0.0;
                    Data[16] = 0.0;
                } else {
                    Data[11] = 0.0;
                    Data[12] = 0.0;
                    Data[13] = 0.0;
                    Data[14] = 0.0;
                    TotalReturnIGST = TotalReturnSGST + soldmed.get(i).getGSTAmount();
                    Data[15] = (-1) * soldmed.get(i).getGSTrate();
                    Data[16] = (-1) * soldmed.get(i).getGSTAmount();
                }
                ReturnBillData.add(Data);
            }
            if (soldmed.get(i).getGSTrate() == 0) {
                TotalNillAmount = TotalNillAmount + soldmed.get(i).getInvoiceAmount();
                TotalNillTaxableAmount = TotalNillTaxableAmount + soldmed.get(i).getTaxableAmount();
                TotalNillIQTY = TotalNillIQTY + soldmed.get(i).getQTY();
                Object[] Data = new Object[17];
                Data[0] = NillRatedData.size() + 1;
                Data[1] = soldmed.get(i).getClientName();
                Data[2] = soldmed.get(i).getGSTN();
                Data[3] = format1.format(soldmed.get(i).getInvoiceDate());
                Data[4] = soldmed.get(i).getInvoiceNo();
                Data[5] = soldmed.get(i).getInvoiceAmount();
                Data[6] = soldmed.get(i).getDestination();
                Data[7] = soldmed.get(i).getHSNCode();
                Data[8] = soldmed.get(i).getQTY();
                Data[9] = soldmed.get(i).getInvoiceAmount();
                Data[10] = soldmed.get(i).getTaxableAmount();
                if (soldmed.get(i).getDestination().contains("09-Uttar Pradesh")) {
                    TotalNillSGST = TotalNillSGST + soldmed.get(i).getGSTAmount() / 2;
                    TotalNillCGST = TotalNillSGST + soldmed.get(i).getGSTAmount() / 2;
                    Data[11] = soldmed.get(i).getGSTrate() / 2;
                    Data[12] = soldmed.get(i).getGSTAmount() / 2;
                    Data[13] = soldmed.get(i).getGSTrate() / 2;
                    Data[14] = soldmed.get(i).getGSTAmount() / 2;
                    Data[15] = 0.0;
                    Data[16] = 0.0;
                } else {
                    Data[11] = 0.0;
                    Data[12] = 0.0;
                    Data[13] = 0.0;
                    Data[14] = 0.0;
                    TotalNillIGST = TotalNillSGST + soldmed.get(i).getGSTAmount();
                    Data[15] = soldmed.get(i).getGSTrate();
                    Data[16] = soldmed.get(i).getGSTAmount();
                }
                NillRatedData.add(Data);
            }

        }

        try {
            //Creating input stream
            File xlsxFile = new File(GSTR1FileLocation);
            Workbook workbook;
            try (FileInputStream inputStream = new FileInputStream(xlsxFile)) {
                workbook = new XSSFWorkbook(inputStream);
                Sheet sheet = workbook.getSheetAt(0);
                CellStyle CellStyle = workbook.createCellStyle();
                int r = sheet.getLastRowNum();
                System.out.println(r);
                for (int i = 8; i < r; i++) {
                    if (sheet.getRow(i) != null) {
                        sheet.removeRow(sheet.getRow(i));
                    }
                }
                CellStyle.setFillBackgroundColor(IndexedColors.YELLOW.getIndex());
                CellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                Font createFont = workbook.createFont();
                createFont.setBold(true);
                createFont.setColor(HSSFColor.HSSFColorPredefined.WHITE.getIndex());
                CellStyle.setFont(createFont);
//B2B
                Object vals[] = {TotalB2BQTY, TotalB2BAmount, TotalB2BTaxableAmount, " ", TotalB2BSGST, " ", TotalB2BCGST, " ", TotalB2BIGST};
                row = AddHeadingdata(vals, sheet, CellStyle, "B2B", 8);
                if (!B2BData.isEmpty()) {
                    row = AddSalesdata(B2BData, row, sheet);
                }   //Nill Rated
                Object Nillvals[] = {TotalNillIQTY, TotalNillAmount, TotalNillTaxableAmount, " ", TotalNillSGST, " ", TotalNillCGST, " ", TotalNillIGST};
                row = AddHeadingdata(Nillvals, sheet, CellStyle, "Nill Rated", row);
                if (!NillRatedData.isEmpty()) {
                    row = AddSalesdata(NillRatedData, row, sheet);
                }
//gross Total
                Object Grossvals[] = {TotalNillIQTY + TotalB2BQTY, TotalB2BAmount + TotalNillAmount, TotalB2BTaxableAmount + TotalNillTaxableAmount, " ", TotalB2BSGST + TotalNillSGST, " ", TotalB2BCGST + TotalNillCGST, " ", TotalB2BIGST + TotalNillIGST};
                row = AddHeadingdata(Grossvals, sheet, CellStyle, "Gross Total", row);
//Return Bills
                Object Returnvals[] = {TotalReturnQTY, -TotalReturnAmount, -TotalReturnTaxableAmount, " ", -TotalReturnSGST, " ", -TotalReturnCGST, " ", -TotalReturnIGST};
                row = AddHeadingdata(Returnvals, sheet, CellStyle, "Return", row);
                if (!ReturnBillData.isEmpty()) {
                    row = AddSalesdata(ReturnBillData, row, sheet);
                }
//Net Total
                Object netvals[] = {TotalNillIQTY + TotalB2BQTY - TotalReturnQTY, TotalB2BAmount + TotalNillAmount + TotalReturnAmount, TotalB2BTaxableAmount + TotalNillTaxableAmount + TotalReturnTaxableAmount, " ", TotalB2BSGST + TotalNillSGST + TotalReturnSGST, " ", TotalB2BCGST + TotalNillCGST + TotalReturnCGST, " ", TotalB2BIGST + TotalNillIGST + TotalReturnIGST};
                row = AddHeadingdata(netvals, sheet, CellStyle, "Net Total", row);
                //Close input stream
            }

            //Crating output stream and writing the updated workbook
            FileOutputStream os = new FileOutputStream(xlsxFile);
            workbook.write(os);

            //Close the workbook and output stream
            System.out.println("Excel file has been updated successfully.");
            String home = System.getProperty("user.home");
            File source = new File(GSTR1FileLocation);
            File dest = new File(home + "/Downloads/"+format1.format(start)+"To"+format1.format(end)+"GSTR1");
            System.out.println(dest + "------" + source);
            
            FileUtils.copyFileToDirectory(source, dest);
            Desktop desktop = Desktop.getDesktop();  
            File open= new File(home + "/Downloads/"+format1.format(start)+"To"+format1.format(end)+"GSTR1"+"\\"+GSTR1File);
             JOptionPane.showMessageDialog(rootPane, "File download Complete, Check your Download Folder");
            desktop.open(open);

            workbook.close();
            os.close();
           
        } catch (EncryptedDocumentException | IOException e) {
            System.err.println("Exception while updating an existing excel file.");
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            //Creating input stream
            File xlsxFile = new File(SalesFileLocation);
            Workbook workbook;
            try (FileInputStream inputStream = new FileInputStream(xlsxFile)) {
                 workbook = new XSSFWorkbook(inputStream);
                Sheet sheet = workbook.getSheetAt(0);
                CellStyle CellStyle = workbook.createCellStyle();
                int r = sheet.getLastRowNum();
                System.out.println(r);
                for (int i = 8; i < r; i++) {
                    if (sheet.getRow(i) != null) {
                        sheet.removeRow(sheet.getRow(i));
                    }
                }

                Font createFont = workbook.createFont();
                createFont.setBold(true);

                CellStyle.setFont(createFont);
                int rowCount = 1;
                for (GSTR1Model rowData : soldmed) {

                    Row row = sheet.createRow(rowCount++);

                    int colNum = 0;
                    Cell cell = row.createCell(colNum++);
                    cell.setCellValue((String) rowData.getInvoiceNo());
                    cell = row.createCell(colNum++);
                    cell.setCellValue((String) format1.format(rowData.getInvoiceDate()));
                    cell = row.createCell(colNum++);
                    cell.setCellValue((String) rowData.getClientName());
                    cell = row.createCell(colNum++);
                    cell.setCellValue((String) rowData.getGSTN());
                    cell = row.createCell(colNum++);
                    cell.setCellValue((String) format1.format(rowData.getInvoiceDate()).split("-")[1]);
                    cell = row.createCell(colNum++);
                    String FinancalYear = Utility.generatefinancialyear(format1.format(rowData.getInvoiceDate()));
                    cell.setCellValue((String) FinancalYear);
                    cell = row.createCell(colNum++);
                    cell.setCellValue((String) rowData.getNature());
                    String TransactionType = "Return";
                    if (rowData.getTaxableAmount() > 0) {
                        TransactionType = "Sales";
                    }
                    cell = row.createCell(colNum++);
                    cell.setCellValue((String) TransactionType);

                    cell = row.createCell(colNum++);
                    cell.setCellValue((String) rowData.getDestination());

                    cell = row.createCell(colNum++);
                    cell.setCellValue((String) rowData.getHSNCode());

                    cell = row.createCell(colNum++);
                    cell.setCellValue(rowData.getQTY());

                    cell = row.createCell(colNum++);
                    cell.setCellValue(rowData.getTaxableAmount());

                    cell = row.createCell(colNum++);
                    cell.setCellValue(rowData.getGSTrate());
                    ///
                    if (!rowData.getDestination().contains("09-Uttar Pradesh")) {
                        //igst
                        cell = row.createCell(colNum++);
                        cell.setCellValue(rowData.getGSTAmount());
                        cell = row.createCell(colNum++);
                        cell.setCellValue((Double) 0.0);
                        cell = row.createCell(colNum++);
                        cell.setCellValue((Double) 0.0);

                    } else {
                        cell = row.createCell(colNum++);
                        cell.setCellValue((Double) 0.0);
                        cell = row.createCell(colNum++);
                        cell.setCellValue(rowData.getGSTAmount() / 2);
                        cell = row.createCell(colNum++);
                        cell.setCellValue(rowData.getGSTAmount() / 2);

                    }
                    cell = row.createCell(colNum++);
                    cell.setCellValue(rowData.getInvoiceAmount());

                }
            }
            //Crating output stream and writing the updated workbook
            FileOutputStream os = new FileOutputStream(xlsxFile);
            workbook.write(os);

            //Close the workbook and output stream
            System.out.println("Excel file has been updated successfully.");
            String home = System.getProperty("user.home");
            File source = new File(SalesFileLocation);
            File dest = new File(home + "/Downloads/"+format1.format(start)+"To"+format1.format(end)+"Sales");
            System.out.println(dest + "------" + source);
            FileUtils.copyFileToDirectory(source, dest);
            Sheet sheet = workbook.getSheetAt(0);
            Desktop desktop = Desktop.getDesktop();  
            File open= new File(home + "/Downloads/"+format1.format(start)+"To"+format1.format(end)+"Sales"+"\\"+SalesFile);
            JOptionPane.showMessageDialog(rootPane, "File download Complete, Check your Download Folder");
            desktop.open(open);
//            for (int i = 8; i < 100; i++) {
//                    if (sheet.getRow(i) != null) {
//                        sheet.removeRow(sheet.getRow(i));
//                    }
//                }
//            workbook.write(os);
            workbook.close();
            os.close();
        } catch (EncryptedDocumentException | IOException e) {
            System.err.println("Exception while updating an existing excel file.");
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void ClubInvoicewithData(Date start, Date end) {
        for (int i = 0; i < soldmed.size(); i++) {
            GSTR1Model g = soldmed.get(i);
            System.out.println(g.getInvoiceDate() + "| " + g.getInvoiceNo() + "| " + g.getTransactionType() + "| " + g.getHSNCode() + "| " + g.getQTY() + "| " + g.getTaxableAmount() + "| " + g.getGSTrate() + "| " + g.getGSTAmount() + "| " + g.getInvoiceAmount());

        }
        System.out.println("------------------------------------------------------------------------");
        //clubing invoices which have same HSN Code
        for (int i = 0; i < soldmed.size(); i++) {
            GSTR1Model main = soldmed.get(i);
            for (int j = i + 1; j < soldmed.size(); j++) {
                GSTR1Model submain = soldmed.get(j);
                if (main.getInvoiceNo().equals(submain.getInvoiceNo()) && main.getHSNCode().equals(submain.getHSNCode()) && !submain.getNature().equals("1")) {
                    main.setQTY(main.getQTY() + submain.getQTY());
                    main.setTaxableAmount(main.getTaxableAmount() + submain.getTaxableAmount());
                    main.setGSTAmount(main.getGSTAmount() + submain.getGSTAmount());
                    main.setInvoiceAmount(main.getInvoiceAmount() + submain.getInvoiceAmount());
                    submain.setNature("1");
                }
            }
        }
        for (int i = 0; i < soldmed.size(); i++) {
            if (soldmed.get(i).getNature().equals("1")) {
                soldmed.remove(i);
                i--;
            }
        }

        for (int i = 0; i < soldmed.size(); i++) {
            GSTR1Model g = soldmed.get(i);
            System.out.println(g.getInvoiceDate() + "| " + g.getInvoiceNo() + "| " + g.getTransactionType() + "| " + g.getHSNCode() + "| " + g.getQTY() + "| " + g.getTaxableAmount() + "| " + g.getGSTrate() + "| " + g.getGSTAmount() + "| " + g.getInvoiceAmount() + "                   " + g.getNature());

        }
        System.out.println("------------------------------------------------------------------------");
        //fetch clientname gstin destination from cistomer and bill table
        ArrayList<GSTR1Model> soldmedotherdetails = new ArrayList<>();
        soldmedotherdetails = DBCalls.BillsDataforGST(start.getTime(), end.getTime());
        for (int i = 0; i < soldmedotherdetails.size(); i++) {
            GSTR1Model g = soldmedotherdetails.get(i);
            System.out.println(g.getInvoiceNo() + "| " + g.getClientName() + "| " + g.getGSTN() + "| " + g.getNature());

        }

        for (int i = 0; i < soldmedotherdetails.size(); i++) {
            GSTR1Model bill = soldmedotherdetails.get(i);
            for (int j = 0; j < soldmed.size(); j++) {
                GSTR1Model item = soldmed.get(j);
                if (item.getInvoiceNo().equals(bill.getInvoiceNo())) {
                    item.setClientName(bill.getClientName());
                    item.setGSTN(bill.getGSTN());
                    item.setNature(bill.getNature());
                    item.setDestination(bill.getDestination());
                }

            }
        }

    }
Date start;
Date end;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //       fetch data from sold medicine table
         start = jDateChooser1.getDate();
         end = jDateChooser2.getDate();
        soldmed.clear();
        soldmed = DBCalls.SoldMedicinesDataforGST(start.getTime(), end.getTime());
        ClubInvoicewithData(start, end);
        
        jButton2.setVisible(true);
        jButton3.setVisible(true);
jButton4.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public int AddSalesdata(ArrayList<Object[]> Data, int rowCount, Sheet sheet) {
        for (Object[] rowData : Data) {

            Row row = sheet.createRow(rowCount++);

            int colNum = 1;

            for (Object field : rowData) {
                if (field != null);
                {
                    Cell cell = row.createCell(colNum++);
                    if (field instanceof String) {
                        cell.setCellValue((String) field);
                    } else if (field instanceof Double) {
                        if ((Double) field < 0) {
                            field = (-1) * (Double) field;
                        }
                        cell.setCellValue((Double) field);
                    } else if (field instanceof Integer) {
                        if ((Integer) field < 0) {
                            field = (-1) * (Integer) field;
                        }
                        cell.setCellValue((Integer) field);
                    }

                }

            }

        }
        return rowCount;
    }

    public int AddHeadingdata(Object vals[], Sheet sheet, CellStyle CellStyle, String Heading, int rowCount) {
//    int rowCount = 8;
        Row row = sheet.createRow(rowCount++);
        row = sheet.createRow(rowCount++);
        Cell cell = row.createCell(1);
        cell.setCellValue(Heading);
        cell.setCellStyle(CellStyle);
        for (int i = 2; i < 9; i++) {
            cell = row.createCell(i);
            cell.setCellStyle(CellStyle);
        }
        for (int i = 9; i < 18; i++) {
            cell = row.createCell(i);

            if (vals[i - 9] instanceof String) {
                cell.setCellValue((String) vals[i - 9]);
            } else if (vals[i - 9] instanceof Double) {

                cell.setCellValue((Double) vals[i - 9]);
            } else if (vals[i - 9] instanceof Integer) {

                cell.setCellValue((Integer) vals[i - 9]);
            }
            cell.setCellStyle(CellStyle);
        }
        return rowCount;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GSTMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GSTMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GSTMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GSTMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GSTMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
